#!/usr/bin/env node

process.chdir(__dirname);

const fs = require('fs');

const CONFIG_PATH = './config.json';

if (!fs.existsSync(CONFIG_PATH)) {
  // if no config file
  // write default config
  fs.writeFileSync(CONFIG_PATH, JSON.stringify({ hostsPath: '/etc/hosts' }), function (err) {
    if (err) throw err;
  });
}

const CONFIG = JSON.parse( fs.readFileSync(CONFIG_PATH, 'utf-8') );
const HOSTS_FILE_PATH = CONFIG.hostsPath;

const fileActions = {
  getAllHostsAsJSON() {
    return fs.readFileSync(HOSTS_FILE_PATH, 'utf-8')
      .split(/\n/)
      .map((str) => {
        const parts = str.match(/([^\s]+)\s+(.+)$/);
        if (!parts || parts.length < 3) {
          // no match
          return null;
        }
        return {
          ip: parts[1],
          hosts: parts[2].split(' ').filter((part) => part)
        };
      })
      .filter((row) => {
        if (row === null) {
          return false;
        }
        if (row.ip.match(/[0-9]/) === null) {
          return false;
        }
        return true;
      });
  },

  writeHostsToFile(hosts) {
    let fileStr = '';

    for (const host of hosts) {
      fileStr += `${host.ip} ${host.hosts.join(' ')}\n`;
    }

    fs.writeFileSync(HOSTS_FILE_PATH, fileStr, function (err) {
      if (err) throw err;
      console.log('Saved!');
      process.exit(0);
    });
  },

  addHostToFile(ip, hosts) {
    fs.appendFileSync(HOSTS_FILE_PATH, `${ip} ${hosts.join(' ')}\n`, function (err) {
      if (err) throw err;
      console.log('Saved!');
      process.exit(0);
    });
  },

  removeHostFromFile(ip, hosts, rmHost) {
    const hostsStr = fs.readFileSync(HOSTS_FILE_PATH, 'utf-8');
    const newHosts = hosts.filter((host) => host !== rmHost);
    let newRowStr = '';

    if (newHosts.length > 0) {
      newRowStr = `${ip} ${newHosts.join(' ')}\n`;
    }

    const newHostsStr = hostsStr.replace(new RegExp(`${ip}\\s+${hosts.join(' ')}\\n`), newRowStr);

    fs.writeFileSync(HOSTS_FILE_PATH, newHostsStr, function (err) {
      if (err) throw err;
      console.log('Saved!');
      process.exit(0);
    });
  },

  getHost(findHost) {
    const hosts = this.getAllHostsAsJSON();
    for (const host of hosts) {
      if (host.hosts.includes(findHost)) {
        // record exists
        return host;
      }
    }
    return null;
  }
};

const commands = {
  add(ip, ...hosts) {
    if (!ip || !hosts) {
      console.log('Usage: hostsm add <ip> <...hosts>');
      process.exit(1);
    }

    for (const host of hosts) {
      const exists = fileActions.getHost(host);
      if (exists) {
        console.log('Record exists');
        process.exit(1);
      }
    }

    fileActions.addHostToFile(ip, hosts);
  },

  rm(host) {
    if (!host) {
      console.log('Usage: hostsm remove <host>');
      process.exit(1);
    }

    const match = fileActions.getHost(host);

    if (match === null) {
      console.log('Record does not exist');
      process.exit(1);
      return;
    }

    fileActions.removeHostFromFile(match.ip, match.hosts, host);
  },

  cleanup() {
    const rows = fileActions.getAllHostsAsJSON();
    const newHosts = {};
    const newHostsArr = [];

    for (const {ip, hosts} of rows) {
      if (!newHosts[ip]) {
        newHosts[ip] = [];
      }
      newHosts[ip].push(...hosts);
    }

    for (const ip in newHosts) {
      newHostsArr.push({ip, hosts: newHosts[ip]});
    }

    fileActions.writeHostsToFile(newHostsArr);
  },

  config(key, newValue = null) {
    if (!key) {
      console.log('Usage: hostsm config (print|<configKey>) <newValue>');
      process.exit(1);
    }

    if (key === 'print') {
      console.log(CONFIG);
      process.exit(0);
    }

    const allowedFields = Object.keys(CONFIG);

    if (!allowedFields.includes(key)) {
      console.log(`${key} is not an allowed config key. The allowed config keys are: ${allowedFields.join(', ')}`);
      process.exit(0);
    }

    if (!newValue) {
      console.log(CONFIG[key]);
      process.exit(0);
    }

    CONFIG[key] = newValue;

    fs.writeFileSync(CONFIG_PATH, JSON.stringify(CONFIG), function (err) {
      if (err) throw err;
      console.log('Saved!');
      process.exit(0);
    });
  },

  list() {
    const hosts = fileActions.getAllHostsAsJSON();
    console.log(hosts);
    process.exit(0);
  },

  version() {
    console.log('v1.0.0');
    process.exit(0);
  },

  help() {
    console.log(`
      Usage: hostsm <command>

      Commands:
        list      list all hosts
        add       add a new host
        rm        remove a host
        cleanup   clean up hosts file
        config    print or change a config setting
        version   print the cli version
        help      print this help message
    `);
    process.exit(0);
  }
};

const args = process.argv;
const command = args[2];
const handler = commands[command];

if (!command || !handler) {
  // no command or command handler
  // print help
  commands.help();
}

// get clean arguments for handler
const cleanArgs = args.splice(3, args.length);
handler(...cleanArgs);
