#!/usr/bin/env node

process.chdir(__dirname);

const fs = require('fs');

const CONFIG_PATH = './config.json';

if (!fs.existsSync(CONFIG_PATH)) {
  // if no config file
  // write default config
  fs.writeFileSync(CONFIG_PATH, JSON.stringify({ hostsPath: '/etc/hosts' }), function (err) {
    if (err) throw err;
  });
}

const CONFIG = JSON.parse( fs.readFileSync(CONFIG_PATH, 'utf-8') );
const HOSTS_FILE_PATH = CONFIG.hostsPath;

const fileActions = {
  getAllHostsAsJSON() {
    return fs.readFileSync(HOSTS_FILE_PATH, 'utf-8')
      .split(/\n/)
      .map((str) => {
        const parts = str.match(/([^\s]+)\s+([^\s]+)/);
        if (!parts || parts.length < 3) {
          // no match
          return null;
        }
        return {
          host: parts[1],
          alias: parts[2]
        };
      })
      .filter((row) => row !== null);
  },

  addHostToFile(host, alias) {
    fs.appendFileSync(HOSTS_FILE_PATH, `${host} ${alias}\n`, function (err) {
      if (err) throw err;
      console.log('Saved!');
      process.exit(0);
    });
  },

  removeHostFromFile(host, alias) {
    const hostsStr = fs.readFileSync(HOSTS_FILE_PATH, 'utf-8');
    const newHostsStr = hostsStr.replace(new RegExp(`${host}\\s+${alias}\\n`), '');
    fs.writeFileSync(HOSTS_FILE_PATH, newHostsStr, function (err) {
      if (err) throw err;
      console.log('Saved!');
      process.exit(0);
    });
  },

  getHostByAlias(alias) {
    const hosts = this.getAllHostsAsJSON();
    for (const host of hosts) {
      if (host.alias === alias) {
        // record exists
        return host;
      }
    }
    return null;
  }
};

const commands = {
  add(host, alias) {
    if (!host || !alias) {
      console.log('Usage: hostsm add <host> <alias>');
      process.exit(1);
    }
    const hosts = fileActions.getAllHostsAsJSON();
    const exists = fileActions.getHostByAlias(alias);
    if (exists) {
      console.log('Record exists');
      process.exit(1);
    }
    fileActions.addHostToFile(host, alias);
  },

  remove(alias) {
    if (!alias) {
      console.log('Usage: hostsm remove <alias>');
      process.exit(1);
    }
    const hosts = fileActions.getAllHostsAsJSON();
    let match = null;

    for (const host of hosts) {
      if (host.alias === alias) {
        // record exists
        match = host;
      }
    }

    if (match === null) {
      console.log('Record does not exist');
      process.exit(1);
      return;
    }

    fileActions.removeHostFromFile(match.host, match.alias);
  },

  set(alias, newAlias) {
    if (!alias || !newAlias) {
      console.log('Usage: hostsm set <alias> <newAlias>');
      process.exit(1);
    }
    const hosts = fileActions.getAllHostsAsJSON();
    const foundHost = fileActions.getHostByAlias(alias);
    if (!foundHost) {
      console.log('Host not found');
      process.exit(1);
    }
    commands.remove(alias);
    commands.add(foundHost.host, newAlias);
    process.exit(0);
  },

  config(key, newValue = null) {
    if (!key) {
      console.log('Usage: hostsm config (print|<configKey>) <newValue>');
      process.exit(1);
    }

    if (key === 'print') {
      console.log(CONFIG);
      process.exit(0);
    }

    const allowedFields = Object.keys(CONFIG);

    if (!allowedFields.includes(key)) {
      console.log(`${key} is not an allowed config key. The allowed config keys are: ${allowedFields.join(', ')}`);
      process.exit(0);
    }

    if (!newValue) {
      console.log(CONFIG[key]);
      process.exit(0);
    }

    CONFIG[key] = newValue;

    fs.writeFileSync(CONFIG_PATH, JSON.stringify(CONFIG), function (err) {
      if (err) throw err;
      console.log('Saved!');
      process.exit(0);
    });
  },

  print() {
    const hosts = fileActions.getAllHostsAsJSON();
    console.log(hosts);
    process.exit(0);
  },

  version() {
    console.log('v1.0.0');
    process.exit(0);
  },

  help() {
    console.log(`
      Usage: hostsm <command>

      Commands:
        print     print all hosts
        add       add a new host
        remove    remove a host
        set       set a new alias for an existing host
        config    print or change a config setting
        version   print the cli version
        help      print this help message
    `);
    process.exit(0);
  }
};

const args = process.argv;
const command = args[2];
const handler = commands[command];

if (!command || !handler) {
  // no command or command handler
  // print help
  commands.help();
}

// get clean arguments for handler
const cleanArgs = args.splice(3, args.length);
handler(...cleanArgs);
